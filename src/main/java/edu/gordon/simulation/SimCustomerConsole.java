/* * ATM Example system - file SimDisplay.java * * copyright (c) 2001 - Russell C. Bjork * */ package edu.gordon.simulation;import java.awt.Color;import java.awt.Font;import java.awt.GridLayout;import java.awt.Insets;import java.awt.Label;import java.awt.Panel;import java.util.StringTokenizer;import edu.gordon.atm.physical.CustomerConsole;import edu.gordon.atm.physical.CustomerConsole.Cancelled;import edu.gordon.banking.Money;/** Simulate the display portion of the customer console */class SimCustomerConsole extends Panel implements CustomerConsole{    /** Constructor     */    SimCustomerConsole()    {        setLayout(new GridLayout(ATMPanel.DISPLAYABLE_LINES, 1));        setBackground(new Color(0, 96, 0));  // Dark green        setForeground(Color.white);                Font lineFont = new Font("Monospaced", Font.PLAIN, 14);        displayLine = new Label[ATMPanel.DISPLAYABLE_LINES];        for (int i = 0; i < ATMPanel.DISPLAYABLE_LINES; i ++)        {            displayLine[i] = new Label(ATMPanel.BLANK_DISPLAY_LINE);            displayLine[i].setFont(lineFont);            add(displayLine[i]);        }        currentDisplayLine = 0;            }        /** Clear the display     */    void clearDisplay()    {         for (int i = 0; i < displayLine.length; i ++)            displayLine[i].setText("");        currentDisplayLine = 0;    }          /** Display a message to the customer    *    *  @param message the message to display    */    public void display(String message)    {         StringTokenizer tokenizer = new StringTokenizer(message, "\n", false);        while (tokenizer.hasMoreTokens())        {             try            {                 displayLine[currentDisplayLine ++].setText(tokenizer.nextToken());             }            catch (Exception e)            { }        }    }        public int readPIN(String prompt) throws Cancelled    {        clearDisplay();        display(prompt);        display("");                String input = Simulation.getInstance().readInput(Simulation.PIN_MODE, 0);                clearDisplay();                if (input == null)            throw new Cancelled();        else            return Integer.parseInt(input);    }        /** Display a menu of options and return choice made by customer    *    *  @param prompt message to display before the list of options    *  @param menu the options    *  @return the number of the option chosen (0 .. # of options - 1)    *  Note: the options are numbered 1 .. # of options when displayed for the    *  customer - but the menu array indices and the final result returned are in    *  the range 0 .. # of options - 1    *    *  @exception Cancelled if customer presses the CANCEL key before choosing option    */   public synchronized int readMenuChoice(String prompt, String[] menu) throws Cancelled   {	   clearDisplay();       display(prompt);       for (int i = 0; i < menu.length; i ++)           display((i+1) + ") " + menu[i]);       String input =            Simulation.getInstance().readInput(Simulation.MENU_MODE, menu.length);                  clearDisplay();              if (input == null)           throw new Cancelled();       else           return Integer.parseInt(input) - 1;   }   	/** Read a money amount entered by the customer	 *	 *  @param prompt the message to display prompting the customer to enter amount	 *  @return the amount entered by the customer	 *  @exception Cancelled if customer presses the CANCEL key before pressing ENTER	 */	public synchronized Money readAmount(String prompt) throws Cancelled	{		clearDisplay();		display(prompt);		display("");				String input=Simulation.getInstance().readInput(Simulation.AMOUNT_MODE,0);				clearDisplay();				if(input==null)			throw new Cancelled();		else		{			int dollars = Integer.parseInt(input)/100;			int cents = Integer.parseInt(input)%100;			return new Money(dollars, cents);		}	}        /** Set echoed input on the display     *     *  @param echo the line to be echoed - always the entire line     */    void setEcho(String echo)    {        displayLine[currentDisplayLine].setText(            ATMPanel.BLANK_DISPLAY_LINE.substring(0,                 ATMPanel.BLANK_DISPLAY_LINE.length() / 2 - echo.length()) + echo);    }        /** Override the getInsets() method to provide additional spacing all     *  around     */    public Insets getInsets()    {        Insets insets = super.getInsets();        insets.top += 5;        insets.bottom += 5;        insets.left += 10;        insets.right += 10;        return insets;    }    /** Individual lines comprising the display     */    private Label [] displayLine;        /** Number of the current line to write to     */    private int currentDisplayLine;}                                       